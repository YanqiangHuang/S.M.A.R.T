#coding=utf-8
import os
import numpy
from collections import *
import pandas as pd
import binascii
from PIL import Image
from sklearn import svm

def getMatrixfrom_bin(filename, width = 512, oneRow = False):
    with open(filename, 'rb') as f:
        content = f.read()
    hexst = binascii.hexlify(content)
    fh = numpy.array([int(hexst[i:i+2],16) for i in range(0, len(hexst), 2)])
    if oneRow is False:
        rn = len(fh)/width
        fh = numpy.reshape(fh[:rn*width],(-1,width))
    fh = numpy.uint8(fh)
    return fh

def getMatrixfrom_asm(filename, startindex = 0, pixnum = 5000):
    with open(filename, 'rb') as f:
        f.seek(startindex, 0)
        content = f.read(pixnum)
    hexst = binascii.hexlify(content)
    fh = numpy.array([int(hexst[i:i+2],16) for i in range(0, len(hexst), 2)])
    fh = numpy.uint8(fh)
    print fh
    return fh

def getMatrixfrom_hex(filename, width):
    hexar = []
    with open(filename,'rb') as f:
        for line in f:
            hexar.extend(int(el,16) for el in line.split()[1:] if el != "??")
    t_ln = os.path.getsize(filename)
    width = int(len(hexar)**0.5)
    rn = len(hexar)/width
    # rn = int(len(hexar) ** 0.5)
    fh = numpy.reshape(hexar[:rn*width],(-1,width))
    # fh = numpy.reshape(hexar[:rn*width],(-1,rn))
    fh = numpy.uint8(fh)
    return fh

def read_hexbytes(filename):
    hexar = []
    with open(filename,'rb') as f:
        for line in f:
            hexar.extend(int(el,16) for el in line.split()[1:] if el != "??")
    rn = len(hexar)/256
    fh = numpy.reshape(hexar[:rn*256],(-1,256))
    fh = numpy.uint8(fh)
    return fh

basepath = "E:\\git\\test\\train\\1\\"
mapimg = defaultdict(list)
subtrain = pd.read_csv('subtrainLabels.csv')
i = 0
for sid in subtrain.Id:
    i += 1
    print "dealing with {0}th file...".format(str(i))
    filename = basepath + sid + ".bytes"
    # try:
    #     im = read_hexbytes(filename)
    #     # im = getMatrixfrom_asm(filename, startindex = 0, pixnum = 1500)
    #     print im
    #     mapimg[sid] = im
    # except:
    #     print "not this file"
    # im = getMatrixfrom_asm(filename, startindex = 0, pixnum = 1500)
    #---------------------------------------
    try:
    im = getMatrixfrom_hex(filename, 512)
        im = Image.fromarray(im) #转换为图像
        sname = str(filename) + ".png"
        im.save(sname)
    except:
        print "not in this folder"
    #---------------------------------------
    # mapimg[sid] = im

# dataframelist = []
# for sid,imf in mapimg.iteritems():
#     standard = {}
#     standard["Id"] = sid
#     for index,value in enumerate(imf):
#         colName = "test{0}".format(str(index))
#         standard[colName] = value
#     dataframelist.append(standard)

# df = pd.DataFrame(dataframelist)
# df.to_csv("test_imgfeature.csv",index=False)